/*
 * Copyright IBM Corp. All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */'use strict';// Deterministic JSON.stringify()
var cov_ywe1aci1s=function(){var path="/home/harman/BCDV1025_Lab6/lib/fareTransfer.js";var hash="3c365e7d18957184e059b63f07453012dd1a0086";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/harman/BCDV1025_Lab6/lib/fareTransfer.js",statementMap:{"0":{start:{line:10,column:18},end:{line:10,column:57}},"1":{start:{line:11,column:26},end:{line:11,column:56}},"2":{start:{line:12,column:21},end:{line:12,column:51}},"3":{start:{line:13,column:14},end:{line:13,column:35}},"4":{start:{line:17,column:22},end:{line:60,column:5}},"5":{start:{line:62,column:4},end:{line:72,column:5}},"6":{start:{line:63,column:6},end:{line:63,column:36}},"7":{start:{line:68,column:6},end:{line:71,column:8}},"8":{start:{line:74,column:17},end:{line:80,column:5}},"9":{start:{line:82,column:4},end:{line:85,column:6}},"10":{start:{line:92,column:18},end:{line:92,column:52}},"11":{start:{line:94,column:4},end:{line:96,column:5}},"12":{start:{line:95,column:6},end:{line:95,column:59}},"13":{start:{line:97,column:25},end:{line:97,column:62}},"14":{start:{line:99,column:4},end:{line:101,column:5}},"15":{start:{line:100,column:6},end:{line:100,column:69}},"16":{start:{line:103,column:21},end:{line:110,column:5}},"17":{start:{line:111,column:4},end:{line:114,column:6}},"18":{start:{line:115,column:4},end:{line:115,column:36}},"19":{start:{line:120,column:25},end:{line:120,column:52}},"20":{start:{line:121,column:4},end:{line:123,column:5}},"21":{start:{line:122,column:6},end:{line:122,column:59}},"22":{start:{line:125,column:4},end:{line:125,column:35}},"23":{start:{line:130,column:29},end:{line:130,column:63}},"24":{start:{line:131,column:4},end:{line:133,column:5}},"25":{start:{line:132,column:6},end:{line:132,column:71}},"26":{start:{line:134,column:29},end:{line:134,column:57}},"27":{start:{line:135,column:21},end:{line:135,column:47}},"28":{start:{line:137,column:4},end:{line:137,column:31}},"29":{start:{line:142,column:18},end:{line:142,column:52}},"30":{start:{line:144,column:4},end:{line:146,column:5}},"31":{start:{line:145,column:6},end:{line:145,column:59}},"32":{start:{line:148,column:28},end:{line:148,column:59}},"33":{start:{line:149,column:25},end:{line:149,column:52}},"34":{start:{line:150,column:22},end:{line:150,column:44}},"35":{start:{line:151,column:21},end:{line:151,column:42}},"36":{start:{line:153,column:31},end:{line:160,column:5}},"37":{start:{line:161,column:4},end:{line:164,column:6}},"38":{start:{line:169,column:18},end:{line:169,column:52}},"39":{start:{line:171,column:4},end:{line:173,column:5}},"40":{start:{line:172,column:6},end:{line:172,column:59}},"41":{start:{line:174,column:4},end:{line:174,column:36}},"42":{start:{line:179,column:25},end:{line:179,column:52}},"43":{start:{line:180,column:4},end:{line:180,column:51}},"44":{start:{line:184,column:4},end:{line:186,column:5}},"45":{start:{line:185,column:6},end:{line:185,column:64}},"46":{start:{line:188,column:19},end:{line:188,column:21}},"47":{start:{line:190,column:28},end:{line:190,column:59}},"48":{start:{line:191,column:25},end:{line:191,column:52}},"49":{start:{line:193,column:20},end:{line:193,column:42}},"50":{start:{line:194,column:23},end:{line:194,column:54}},"51":{start:{line:195,column:20},end:{line:195,column:47}},"52":{start:{line:197,column:4},end:{line:211,column:5}},"53":{start:{line:198,column:6},end:{line:210,column:7}},"54":{start:{line:199,column:25},end:{line:199,column:71}},"55":{start:{line:200,column:8},end:{line:207,column:9}},"56":{start:{line:201,column:10},end:{line:205,column:11}},"57":{start:{line:202,column:12},end:{line:202,column:31}},"58":{start:{line:204,column:12},end:{line:204,column:67}},"59":{start:{line:206,column:10},end:{line:206,column:41}},"60":{start:{line:209,column:8},end:{line:209,column:19}},"61":{start:{line:213,column:17},end:{line:219,column:5}},"62":{start:{line:222,column:4},end:{line:225,column:6}},"63":{start:{line:227,column:4},end:{line:227,column:33}},"64":{start:{line:229,column:4},end:{line:232,column:6}},"65":{start:{line:234,column:4},end:{line:234,column:32}},"66":{start:{line:239,column:25},end:{line:239,column:27}},"67":{start:{line:241,column:21},end:{line:241,column:59}},"68":{start:{line:242,column:17},end:{line:242,column:38}},"69":{start:{line:243,column:4},end:{line:256,column:5}},"70":{start:{line:244,column:23},end:{line:246,column:7}},"71":{start:{line:249,column:6},end:{line:253,column:7}},"72":{start:{line:250,column:8},end:{line:250,column:38}},"73":{start:{line:252,column:8},end:{line:252,column:26}},"74":{start:{line:254,column:6},end:{line:254,column:32}},"75":{start:{line:255,column:6},end:{line:255,column:37}},"76":{start:{line:257,column:4},end:{line:257,column:40}},"77":{start:{line:261,column:0},end:{line:261,column:30}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:16,column:2},end:{line:16,column:3}},loc:{start:{line:16,column:24},end:{line:86,column:3}},line:16},"1":{name:"(anonymous_1)",decl:{start:{line:89,column:2},end:{line:89,column:3}},loc:{start:{line:89,column:69},end:{line:116,column:3}},line:89},"2":{name:"(anonymous_2)",decl:{start:{line:119,column:2},end:{line:119,column:3}},loc:{start:{line:119,column:29},end:{line:126,column:3}},line:119},"3":{name:"(anonymous_3)",decl:{start:{line:129,column:2},end:{line:129,column:3}},loc:{start:{line:129,column:44},end:{line:138,column:3}},line:129},"4":{name:"(anonymous_4)",decl:{start:{line:141,column:2},end:{line:141,column:3}},loc:{start:{line:141,column:52},end:{line:165,column:3}},line:141},"5":{name:"(anonymous_5)",decl:{start:{line:168,column:2},end:{line:168,column:3}},loc:{start:{line:168,column:32},end:{line:175,column:3}},line:168},"6":{name:"(anonymous_6)",decl:{start:{line:178,column:2},end:{line:178,column:3}},loc:{start:{line:178,column:32},end:{line:181,column:3}},line:178},"7":{name:"(anonymous_7)",decl:{start:{line:183,column:2},end:{line:183,column:3}},loc:{start:{line:183,column:39},end:{line:235,column:3}},line:183},"8":{name:"(anonymous_8)",decl:{start:{line:238,column:2},end:{line:238,column:3}},loc:{start:{line:238,column:29},end:{line:258,column:3}},line:238}},branchMap:{"0":{loc:{start:{line:94,column:4},end:{line:96,column:5}},type:"if",locations:[{start:{line:94,column:4},end:{line:96,column:5}},{start:{line:94,column:4},end:{line:96,column:5}}],line:94},"1":{loc:{start:{line:99,column:4},end:{line:101,column:5}},type:"if",locations:[{start:{line:99,column:4},end:{line:101,column:5}},{start:{line:99,column:4},end:{line:101,column:5}}],line:99},"2":{loc:{start:{line:121,column:4},end:{line:123,column:5}},type:"if",locations:[{start:{line:121,column:4},end:{line:123,column:5}},{start:{line:121,column:4},end:{line:123,column:5}}],line:121},"3":{loc:{start:{line:121,column:8},end:{line:121,column:50}},type:"binary-expr",locations:[{start:{line:121,column:8},end:{line:121,column:21}},{start:{line:121,column:25},end:{line:121,column:50}}],line:121},"4":{loc:{start:{line:131,column:4},end:{line:133,column:5}},type:"if",locations:[{start:{line:131,column:4},end:{line:133,column:5}},{start:{line:131,column:4},end:{line:133,column:5}}],line:131},"5":{loc:{start:{line:131,column:8},end:{line:131,column:58}},type:"binary-expr",locations:[{start:{line:131,column:8},end:{line:131,column:25}},{start:{line:131,column:29},end:{line:131,column:58}}],line:131},"6":{loc:{start:{line:144,column:4},end:{line:146,column:5}},type:"if",locations:[{start:{line:144,column:4},end:{line:146,column:5}},{start:{line:144,column:4},end:{line:146,column:5}}],line:144},"7":{loc:{start:{line:171,column:4},end:{line:173,column:5}},type:"if",locations:[{start:{line:171,column:4},end:{line:173,column:5}},{start:{line:171,column:4},end:{line:173,column:5}}],line:171},"8":{loc:{start:{line:180,column:11},end:{line:180,column:50}},type:"binary-expr",locations:[{start:{line:180,column:11},end:{line:180,column:23}},{start:{line:180,column:27},end:{line:180,column:50}}],line:180},"9":{loc:{start:{line:184,column:4},end:{line:186,column:5}},type:"if",locations:[{start:{line:184,column:4},end:{line:186,column:5}},{start:{line:184,column:4},end:{line:186,column:5}}],line:184},"10":{loc:{start:{line:197,column:4},end:{line:211,column:5}},type:"if",locations:[{start:{line:197,column:4},end:{line:211,column:5}},{start:{line:197,column:4},end:{line:211,column:5}}],line:197},"11":{loc:{start:{line:197,column:8},end:{line:197,column:37}},type:"binary-expr",locations:[{start:{line:197,column:8},end:{line:197,column:17}},{start:{line:197,column:21},end:{line:197,column:37}}],line:197},"12":{loc:{start:{line:200,column:8},end:{line:207,column:9}},type:"if",locations:[{start:{line:200,column:8},end:{line:207,column:9}},{start:{line:200,column:8},end:{line:207,column:9}}],line:200},"13":{loc:{start:{line:201,column:10},end:{line:205,column:11}},type:"if",locations:[{start:{line:201,column:10},end:{line:205,column:11}},{start:{line:201,column:10},end:{line:205,column:11}}],line:201}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0],"10":[0,0],"11":[0,0],"12":[0,0],"13":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"3c365e7d18957184e059b63f07453012dd1a0086"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const stringify=(cov_ywe1aci1s.s[0]++,require('json-stringify-deterministic'));const sortKeysRecursive=(cov_ywe1aci1s.s[1]++,require('sort-keys-recursive'));const{Contract}=(cov_ywe1aci1s.s[2]++,require('fabric-contract-api'));const utils=(cov_ywe1aci1s.s[3]++,require('./utils.js'));class FareTransfer extends Contract{async InitLedger(ctx){cov_ywe1aci1s.f[0]++;const customers=(cov_ywe1aci1s.s[4]++,[{ID:'customer1',FirstName:'Brad',LastName:'Pitt',TransitId:'TTC',LastTxnId:'fare1'},{ID:'customer2',FirstName:'Olivia',LastName:'Lauren',TransitId:'BT',LastTxnId:''},{ID:'customer3',FirstName:'Max',LastName:'Lusignan',TransitId:'MI',LastTxnId:''},{ID:'customer4',FirstName:'Jin',LastName:'Yu',TransitId:'YRT',LastTxnId:''},{ID:'customer5',FirstName:'Adriana',LastName:'Joseph',TransitId:'TTC',LastTxnId:''},{ID:'customer6',FirstName:'Michael',LastName:'Brown',TransitId:'MI',LastTxnId:''}]);cov_ywe1aci1s.s[5]++;for(const customer of customers){cov_ywe1aci1s.s[6]++;customer.docType='customer';// example of how to write to world state deterministically
// use convetion of alphabetic order
// we insert data in alphabetic order using 'json-stringify-deterministic' and 'sort-keys-recursive'
// when retrieving data, in any lang, the order of data will be the same and consequently also the corresonding hash
cov_ywe1aci1s.s[7]++;await ctx.stub.putState(customer.ID,Buffer.from(stringify(sortKeysRecursive(customer))));}const fare=(cov_ywe1aci1s.s[8]++,{ID:'fare1',docType:'fare',Transit:'TTC',Amount:utils.getTransitFare('TTC'),Timestamp:utils.getCurrentTimestamp()});cov_ywe1aci1s.s[9]++;await ctx.stub.putState(customers[0].LastTxnId,Buffer.from(stringify(sortKeysRecursive(fare))));}// EnrollCustomer adds a new customer to the transit system.
async EnrollCustomer(ctx,id,firstName,lastName,primaryTransit){cov_ywe1aci1s.f[1]++;// Your code goes here
const exist=(cov_ywe1aci1s.s[10]++,await this.CustomerExists(ctx,id));cov_ywe1aci1s.s[11]++;if(exist){cov_ywe1aci1s.b[0][0]++;cov_ywe1aci1s.s[12]++;throw new Error(`The customer ${id} already exists`);}else{cov_ywe1aci1s.b[0][1]++;}const validTransit=(cov_ywe1aci1s.s[13]++,utils.isValidTransfer(primaryTransit));cov_ywe1aci1s.s[14]++;if(validTransit){cov_ywe1aci1s.b[1][0]++;cov_ywe1aci1s.s[15]++;throw new Error(`The transit Id ${primaryTransit} is invalid`);}else{cov_ywe1aci1s.b[1][1]++;}const customer=(cov_ywe1aci1s.s[16]++,{ID:id,docType:'customer',FirstName:firstName,LastName:lastName,TransitId:primaryTransit,LastTxnId:''});cov_ywe1aci1s.s[17]++;await ctx.stub.putState(id,Buffer.from(stringify(sortKeysRecursive(customer))));cov_ywe1aci1s.s[18]++;return JSON.stringify(customer);}// GetCustomer returns the customer info stored in the world state with given id.
async GetCustomer(ctx,id){cov_ywe1aci1s.f[2]++;const customerJSON=(cov_ywe1aci1s.s[19]++,await ctx.stub.getState(id));// get the asset from chaincode state
cov_ywe1aci1s.s[20]++;if((cov_ywe1aci1s.b[3][0]++,!customerJSON)||(cov_ywe1aci1s.b[3][1]++,customerJSON.length===0)){cov_ywe1aci1s.b[2][0]++;cov_ywe1aci1s.s[21]++;throw new Error(`The customer ${id} does not exist`);}else{cov_ywe1aci1s.b[2][1]++;}cov_ywe1aci1s.s[22]++;return customerJSON.toString();}// GetLastFare returns the latest fare info stored in the world state with given id.
async GetCustomerLastFare(ctx,lastTxnId){cov_ywe1aci1s.f[3]++;const customerFareJSON=(cov_ywe1aci1s.s[23]++,await ctx.stub.getState(lastTxnId));// get the asset from chaincode state
cov_ywe1aci1s.s[24]++;if((cov_ywe1aci1s.b[5][0]++,!customerFareJSON)||(cov_ywe1aci1s.b[5][1]++,customerFareJSON.length===0)){cov_ywe1aci1s.b[4][0]++;cov_ywe1aci1s.s[25]++;throw new Error(`The customer fare ${lastTxnId} does not exist`);}else{cov_ywe1aci1s.b[4][1]++;}const customerFareInfo=(cov_ywe1aci1s.s[26]++,JSON.parse(customerFareJSON));const LastFare=(cov_ywe1aci1s.s[27]++,customerFareInfo.TransitId);cov_ywe1aci1s.s[28]++;return LastFare.toString();}// UpdatePrimaryTransit updates an existing customer primaryId.
async UpdatePrimaryTransit(ctx,id,newTransitId){cov_ywe1aci1s.f[4]++;const exist=(cov_ywe1aci1s.s[29]++,await this.CustomerExists(ctx,id));cov_ywe1aci1s.s[30]++;if(!exist){cov_ywe1aci1s.b[6][0]++;cov_ywe1aci1s.s[31]++;throw new Error(`The customer ${id} does not exist`);}else{cov_ywe1aci1s.b[6][1]++;}const customertString=(cov_ywe1aci1s.s[32]++,await this.GetCustomer(ctx,id));const customerInfo=(cov_ywe1aci1s.s[33]++,JSON.parse(customertString));const firstName=(cov_ywe1aci1s.s[34]++,customerInfo.FirstName);const lastName=(cov_ywe1aci1s.s[35]++,customerInfo.LastName);const customerInfoUpdate=(cov_ywe1aci1s.s[36]++,{ID:id,docType:'customer',FirstName:firstName,LastName:lastName,TransitId:newTransitId,LastTxnId:''});cov_ywe1aci1s.s[37]++;return await ctx.stub.putState(id,Buffer.from(stringify(sortKeysRecursive(customerInfoUpdate))));}// DeleteAsset deletes an given asset from the world state.
async DeleteCustomer(ctx,id){cov_ywe1aci1s.f[5]++;const exist=(cov_ywe1aci1s.s[38]++,await this.CustomerExists(ctx,id));cov_ywe1aci1s.s[39]++;if(!exist){cov_ywe1aci1s.b[7][0]++;cov_ywe1aci1s.s[40]++;throw new Error(`The customer ${id} does not exist`);}else{cov_ywe1aci1s.b[7][1]++;}cov_ywe1aci1s.s[41]++;return ctx.stub.deleteState(id);}// CustomerExists returns true when asset with given ID exists in world state.
async CustomerExists(ctx,id){cov_ywe1aci1s.f[6]++;const customerJSON=(cov_ywe1aci1s.s[42]++,await ctx.stub.getState(id));cov_ywe1aci1s.s[43]++;return(cov_ywe1aci1s.b[8][0]++,customerJSON)&&(cov_ywe1aci1s.b[8][1]++,customerJSON.length>0);}async ChargeFare(ctx,id,transitId){cov_ywe1aci1s.f[7]++;cov_ywe1aci1s.s[44]++;if(!utils.isValidTransit(transitId)){cov_ywe1aci1s.b[9][0]++;cov_ywe1aci1s.s[45]++;throw new Error(`Transit Id ${transitId} does not exist`);}else{cov_ywe1aci1s.b[9][1]++;}let customer=(cov_ywe1aci1s.s[46]++,{});const customertString=(cov_ywe1aci1s.s[47]++,await this.GetCustomer(ctx,id));const customerInfo=(cov_ywe1aci1s.s[48]++,JSON.parse(customertString));let lastTxnId=(cov_ywe1aci1s.s[49]++,customerInfo.LastTxnId);let fareToCharge=(cov_ywe1aci1s.s[50]++,utils.getTransitFare(transitId));let timestamp=(cov_ywe1aci1s.s[51]++,utils.getCurrentTimestamp());cov_ywe1aci1s.s[52]++;if((cov_ywe1aci1s.b[11][0]++,lastTxnId)&&(cov_ywe1aci1s.b[11][1]++,lastTxnId!=='')){cov_ywe1aci1s.b[10][0]++;cov_ywe1aci1s.s[53]++;try{const lastFare=(cov_ywe1aci1s.s[54]++,await this.GetCustomerLastFare(ctx,lastTxnId));cov_ywe1aci1s.s[55]++;if(utils.isValidTransfer(lastFare.Timestamp)){cov_ywe1aci1s.b[12][0]++;cov_ywe1aci1s.s[56]++;if(transitId===lastFare.Transit){cov_ywe1aci1s.b[13][0]++;cov_ywe1aci1s.s[57]++;fareToCharge='0';}else{cov_ywe1aci1s.b[13][1]++;cov_ywe1aci1s.s[58]++;fareToCharge=utils.getTransitTransferFare(transitId);}cov_ywe1aci1s.s[59]++;timestamp=lastFare.Timestamp;}else{cov_ywe1aci1s.b[12][1]++;}}catch(err){cov_ywe1aci1s.s[60]++;return err;}}else{cov_ywe1aci1s.b[10][1]++;}const fare=(cov_ywe1aci1s.s[61]++,{ID:utils.getUniqueFareId(),docType:'fare',Transit:transitId,Amount:fareToCharge,Timestamp:timestamp});// we insert data in alphabetic order using 'json-stringify-deterministic' and 'sort-keys-recursive'
cov_ywe1aci1s.s[62]++;await ctx.stub.putState(fare.ID,Buffer.from(stringify(sortKeysRecursive(fare))));cov_ywe1aci1s.s[63]++;customer.LastTxnId=fare.ID;cov_ywe1aci1s.s[64]++;await ctx.stub.putState(customer.ID,Buffer.from(stringify(sortKeysRecursive(customer))));cov_ywe1aci1s.s[65]++;return JSON.stringify(fare);}// GetAllCustomers returns all customers found in the world state.
async GetAllCustomers(ctx){cov_ywe1aci1s.f[8]++;const allCustomers=(cov_ywe1aci1s.s[66]++,[]);// range query with empty string for startKey and endKey does an open-ended query of all assets in the chaincode namespace.
const iterator=(cov_ywe1aci1s.s[67]++,await ctx.stub.getStateByRange('',''));let result=(cov_ywe1aci1s.s[68]++,await iterator.next());cov_ywe1aci1s.s[69]++;while(!result.done){const strValue=(cov_ywe1aci1s.s[70]++,Buffer.from(result.value.value.toString()).toString('utf8'));let record;cov_ywe1aci1s.s[71]++;try{cov_ywe1aci1s.s[72]++;record=JSON.parse(strValue);}catch(err){cov_ywe1aci1s.s[73]++;record=strValue;}cov_ywe1aci1s.s[74]++;allCustomers.push(record);cov_ywe1aci1s.s[75]++;result=await iterator.next();}cov_ywe1aci1s.s[76]++;return JSON.stringify(allCustomers);}}cov_ywe1aci1s.s[77]++;module.exports=FareTransfer;